// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Post {
    id      String @id @default(cuid())
    title   String
    content String
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String    @id @default(cuid())
    sessionToken String    @unique
    userId       String
    expires      DateTime?
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meal {
    id         String   @id @default(cuid())
    name       String
    image      String
    calories   Float
    protein    Float
    fat        Float
    carbs      Float
    time       Int // 0 = breakfast, 1 = lunch, 2 = dinner, 3 = snack
    MealPlan   MealPlan @relation(fields: [mealPlanId], references: [id])
    mealPlanId String
}

model MealPlan {
    id               String    @id @default(cuid())
    userId           String
    user             User      @relation(fields: [userId], references: [id])
    meals            Meal[]
    name             String
    updatedAt        DateTime  @default(now())
    recommendation   String?
    recommendationAt DateTime?
    createdAt        DateTime  @default(now())
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    password      String
    age           Int
    weight        Int
    height        Int
    sports        Int
    image         String?
    calories      Float      @default(0)
    protein       Float      @default(0)
    fat           Float      @default(0)
    carbs         Float      @default(0)
    mealPlans     MealPlan[]
    accounts      Account[]
    sessions      Session[]
    devices       Device[]
    reminders     Reminder[]
}

model Reminder {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    title     String
    time      DateTime
    createdAt DateTime @default(now())
}

model Device {
    id        String   @id @default(cuid())
    pushToken String   @unique
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
